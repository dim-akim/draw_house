Описание версий (этапов создания) мессенджера:

    step_1
        server:
            Простой сервер на Flask ('Hello, World!')
    step_1.1
        server:
            + функция представления status, которая возвращает HTML-код по адресу /status
    step_2
        server:
            + функция hello возвращает ссылку /status
            + список messages (каждое сообщение хранится в виде словаря)
            + функция представления get_messages, которая возвращает словарь {'messages': messages}
        + getter:
            Простой получатель сообщений с помощью метода GET, который записывает ответ в переменную response
            С помощью метода .json() преобразует ответ из JSON в словарь Python
            ПРОБЛЕМА: постоянно получаем все сообщения. Решается на шаге 3
    step_2.1
        server:
            + метка времени: начало работы сервера (модуль datetime)
            + вывод времени начала работы сервера и текущего времени в статусе
    step_3
        server:
            + функция представления send_message, которая принимает поля username и text из поступившего запроса
              и записывает их в список messages
              запрос ловится с помощью объекта request из пакета Flask (нужен импорт)
              возвращает словарь 'ok': True
        +sender:
            Отправляет сообщения GET-запросами, вкладывая в параметр json словарь с ключами username и text
            Имя пользователя получает при начале работы с помощью input (нужна подсказка!)
            Текст сообщения получает в цикле while True с помощью input и сразу отправляет на сервер
    step_3.1
        server:
            + отметка времени time.time() в сообщения для отсчета времени от единой точки (начало эпохи Линукс)
            + функция send_message добавляет при записи сообщения метку 'timestamp': time.time()
    step_4
        + авторизация